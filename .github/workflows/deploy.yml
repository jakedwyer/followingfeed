name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Ensure only one deployment runs at a time
concurrency:
  group: production_environment
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Set a timeout for the entire job

    steps:
      - name: Verify deployment secrets
        run: |
          if [ -z "${{ secrets.DEPLOY_HOST }}" ]; then
            echo "Error: DEPLOY_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DEPLOY_USER }}" ]; then
            echo "Error: DEPLOY_USER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DEPLOY_KEY }}" ]; then
            echo "Error: DEPLOY_KEY secret is not set"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git operations

      - name: Deploy to Production
        id: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          command_timeout: "15m"  # Set timeout for SSH commands
          script: |
            set -e
            echo "Starting deployment at $(date)"
            
            cd /root/followfeed
            
            # Ensure we're on the correct branch
            echo "Checking git status..."
            git fetch origin
            git checkout main
            
            echo "Pulling latest changes..."
            git pull origin main
            
            echo "Stopping existing containers..."
            docker compose down || true
            
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Building new container..."
            docker compose build --no-cache
            
            echo "Starting new container..."
            docker compose up -d
            
            echo "Waiting for health check..."
            for i in {1..6}; do
              echo "Health check attempt $i/6..."
              if docker compose ps | grep -q "Up" && docker compose ps | grep -q "healthy"; then
                echo "Container is healthy!"
                break
              fi
              if [ $i -eq 6 ]; then
                echo "Container failed to become healthy after 3 minutes"
                docker compose logs
                exit 1
              fi
              sleep 30
            done
            
            echo "Verifying logs for errors..."
            if docker compose logs | grep -i "error\|exception\|fatal"; then
              echo "Found errors in container logs"
              docker compose logs
              exit 1
            fi
            
            echo "Deployment completed successfully at $(date)!"

      - name: Notify on Success
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Container is running and healthy"
          echo "Deployed commit: ${{ github.sha }}"
          echo "Deployment time: $(date)"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Failed commit: ${{ github.sha }}"
          echo "Failure time: $(date)"
          echo "Please check the action logs for more information"
